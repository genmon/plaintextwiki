<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
#
# $Revision$
# $LastChangedDate$

require 'Find'
require "#{ENV['TM_SUPPORT_PATH']}/lib/bluecloth.rb"
require "#{ENV['TM_SUPPORT_PATH']}/lib/rubypants.rb"

html_header = '&lt;html&gt;&lt;body&gt;'
html_footer = '&lt;/body&gt;&lt;/html&gt;'

def add_html_links(s)
	linked = []
	s.each_line do |line|
		# markup.other.pagename.camelcase
		line.gsub!(/\b([A-Z][a-z]+([A-Z][a-z]*)+)\b/, '&lt;a href="\1.html"&gt;\1&lt;/a&gt;')
		# markup.other.pagename.delimited
		line.gsub!(/\[\[(.+)\]\]/) { |m|
			pagename = $1.capitalize
			"&lt;a href=\"#{pagename}.html\"&gt;#{pagename}&lt;/a&gt;"
		}
		linked.push(line)
	end
	linked.join("\n")
end

# Make sure this file is saved in a directory
unless ENV['TM_DIRECTORY']
	puts "Save this file first."
	exit 206
end

# Ask the user for an export directory, exiting if cancelled
cocoadialog = "#{ENV['TM_SUPPORT_PATH']}/bin/CocoaDialog.app/Contents/MacOS/CocoaDialog"
export_dir = `#{cocoadialog} fileselect --text "Choose a directory for wiki export" --select-only-directories`.strip
exit if export_dir.empty?

# Gather a list of source files, from the top level only
source_files = []
extensions = ['.txt', '.markdown', '.mdown', '.markdn', '.md']
Find.find(ENV['TM_DIRECTORY']) do |path|
	next if path == ENV['TM_DIRECTORY']
	File.prune if File.directory?(path)
	next unless extensions.include?(File.extname(path))
	source_files.push(path)
end

# For each file, HTML-ify the links, convert to HTML using Markdown, and save
source_files.each do |source|
	s = add_html_links(open(source, 'r').read)
	html = RubyPants.new(BlueCloth.new(s).to_html).to_html

	old_fn = File.split(source)[1]
	new_fn = old_fn[0..(old_fn.length-File.extname(old_fn).length-1)] + '.html'
	File.open( File.join(export_dir, new_fn), 'w' ) { |fh|
		fh.puts(html_header)
		fh.puts(html)
		fh.puts(html_footer)
	}
end

# Open the exported wiki in the default HTML viewer
front = File.join(export_dir, "IndexPage.html")
`open #{front}`
</string>
	<key>input</key>
	<string>none</string>
	<key>name</key>
	<string>Export Wiki as HTML</string>
	<key>output</key>
	<string>discard</string>
	<key>uuid</key>
	<string>FED9A9F7-1158-45DA-953B-543F1E43EA9E</string>
</dict>
</plist>
